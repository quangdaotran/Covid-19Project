## EXTRACTING THE DATA

library(rvest)
library(lubridate)
library(dplyr)

# loop for all states:
states = c("Alabama","Alaska","American-Samoa","Arizona","Arkansas","California","Colorado","Connecticut",
           "Delaware","District-of-Columbia","Florida","Georgia","Guam","Hawaii","Idaho","Illinois",
           "Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts",
           "Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New-Hampshire",
           "New-Jersey","New-Mexico","New-York","North-Carolina","North-Dakota","Northern-Mariana-Islands","Ohio","Oklahoma",
           "Oregon","Pennsylvania","Puerto-Rico","Rhode-Island","South-Carolina","South-Dakota","Tennessee","Texas",
           "US-Virgin-Islands","Utah","Vermont","Virginia","Washington","West-Virginia","Wisconsin","Wyoming")

tail = c("cases","tests-viral","tests-antibody","outcomes") 

BaseURL = "https://covidtracking.com/data/state"
Demo = data.frame(row.names = c("States","Date","Totalcases","Newcases","Confirmedcases","Probablecases",
    "TotalPCR","TotalABT_p","TotalABT_s","Recovered","Totaldeath","Newdeath","Probabledeath","Confirmeddeath","Newrecovered","NewPCR"))

for (i in states){
  JoinURL <-paste(BaseURL,i, sep="/")
  
  #first table: cases of state
  FullURL = paste(JoinURL,"cases",sep="/")
  webpage <- read_html(FullURL)
  tables <- html_nodes(webpage,"table")
  
  parse_data <- html_table(tables[1], fill=TRUE)
  parse_data2 <- parse_data[[1]]
  #parse_data2 = parse_data2[1:245,]
  colnames(parse_data2) = c("Date","Totalcases","Newcases","Confirmedcases","Probablecases")
  
  parse_data2$Date = gsub("Date","",parse_data2$Date)
  parse_data2$Date = mdy(parse_data2$Date)
  
  a = nrow(parse_data2)-1
  for (j in 1:a){
    parse_data2$Date[a+1-j]=parse_data2$Date[a+1]+j
  }
  
  parse_data2$Totalcases = gsub("^.*?)","",parse_data2$Totalcases) #clear everything to the first ")"
  parse_data2$Totalcases = gsub(",","",parse_data2$Totalcases)
  parse_data2$Totalcases = as.numeric(parse_data2$Totalcases)
  
  parse_data2$Newcases = gsub("New cases","",parse_data2$Newcases)
  parse_data2$Newcases = gsub(",","",parse_data2$Newcases)
  parse_data2$Newcases = as.numeric(parse_data2$Newcases)
  
  parse_data2$Confirmedcases = gsub("Confirmed cases","",parse_data2$Confirmedcases)
  parse_data2$Confirmedcases = gsub(",","",parse_data2$Confirmedcases)
  parse_data2$Confirmedcases = as.numeric(parse_data2$Confirmedcases)
  
  parse_data2$Probablecases = gsub("Probable Cases","",parse_data2$Probablecases)
  parse_data2$Probablecases = gsub(",","",parse_data2$Probablecases)
  parse_data2$Probablecases = as.numeric(parse_data2$Probablecases)
  
  parse_data2 = filter(parse_data2,parse_data2$Date >= as.Date("2020-03-31"))
  
  # second table: Viral (PCR) tests:
  FullURL = paste(JoinURL,"tests-viral",sep="/")
  webpage <- read_html(FullURL)
  tables <- html_nodes(webpage,"table")
  
  parse_data <- html_table(tables[1], fill=TRUE)
  parse_data3 <- parse_data[[1]]
  #parse_data3 = parse_data3[1:245,]
  parse_data3 <- parse_data3[,c(1,6)]
  colnames(parse_data3) = c("Date","TotalPCR")
  
  parse_data3$Date = gsub("Date","",parse_data3$Date)
  parse_data3$Date = mdy(parse_data3$Date)
  
  a = nrow(parse_data3)-1
  for (j in 1:a){
    parse_data3$Date[a+1-j]=parse_data3$Date[a+1]+j
  }
  
  parse_data3$TotalPCR = gsub("^.*?)","", parse_data3$TotalPCR) #clear everything to the first ")"
  parse_data3$TotalPCR = gsub(",","", parse_data3$TotalPCR)
  parse_data3$TotalPCR = as.numeric( parse_data3$TotalPCR)
  
  parse_data3 = filter(parse_data3,parse_data3$Date >= as.Date("2020-03-31"))
  
  # third table: antibody tests
  FullURL = paste(JoinURL,"tests-antibody",sep="/")
  webpage <- read_html(FullURL)
  tables <- html_nodes(webpage,"table")
  
  parse_data <- html_table(tables[1], fill=TRUE)
  parse_data4 <- parse_data[[1]]
  #parse_data4 = parse_data4[1:245,]
  parse_data4 <- parse_data4[,1:3]
  colnames(parse_data4) = c("Date","TotalABT_p","TotalABT_s")
  
  parse_data4$Date = gsub("Date","",parse_data4$Date)
  parse_data4$Date = mdy(parse_data4$Date)
  
  a = nrow(parse_data4)-1
  for (j in 1:a){
    parse_data4$Date[a+1-j]=parse_data4$Date[a+1]+j
  }
  
  parse_data4$TotalABT_p = gsub("^.*?)","", parse_data4$TotalABT_p) #clear everything to the first ")"
  parse_data4$TotalABT_p = gsub(",","", parse_data4$TotalABT_p)
  parse_data4$TotalABT_p = as.numeric(parse_data4$TotalABT_p)
  
  parse_data4$TotalABT_s = gsub("^.*?)","", parse_data4$TotalABT_s) #clear everything to the first ")"
  parse_data4$TotalABT_s = gsub(",","", parse_data4$TotalABT_s)
  parse_data4$TotalABT_s = as.numeric(parse_data4$TotalABT_s)
  
  parse_data4 = filter(parse_data4,parse_data4$Date >= as.Date("2020-03-31"))
  
  #fourth table: outcomes of state
  FullURL = paste(JoinURL,"outcomes",sep="/")
  webpage <- read_html(FullURL)
  tables <- html_nodes(webpage,"table")
  
  parse_data <- html_table(tables[1], fill=TRUE)
  parse_data5 <- parse_data[[1]]
  #parse_data5 = parse_data5[1:245,]
  colnames(parse_data5) = c("Date","Recovered","Totaldeath","Newdeath","Probabledeath","Confirmeddeath")
  
  parse_data5$Date = gsub("Date","",parse_data5$Date)
  parse_data5$Date = mdy(parse_data5$Date)
  
  a = nrow(parse_data5)-1
  for (j in 1:a){
    parse_data5$Date[a+1-j]=parse_data5$Date[a+1]+j
  }
  
  parse_data5$Recovered = gsub("Recovered","",parse_data5$Recovered)
  parse_data5$Recovered = gsub(",","",parse_data5$Recovered)
  parse_data5$Recovered = as.numeric(parse_data5$Recovered)
  
  parse_data5$Totaldeath = gsub("^.*?)","",parse_data5$Totaldeath) #clear everything to the first ")"
  parse_data5$Totaldeath = gsub(",","",parse_data5$Totaldeath)
  parse_data5$Totaldeath = as.numeric(parse_data5$Totaldeath)
  
  parse_data5$Newdeath = gsub("New deaths","",parse_data5$Newdeath)
  parse_data5$Newdeath = gsub(",","",parse_data5$Newdeath)
  parse_data5$Newdeath = as.numeric(parse_data5$Newdeath)
  
  parse_data5$Probabledeath = gsub("^.*?)","",parse_data5$Probabledeath)
  parse_data5$Probabledeath = gsub(",","",parse_data5$Probabledeath)
  parse_data5$Probabledeath = as.numeric(parse_data5$Probabledeath)
  
  parse_data5$Confirmeddeath = gsub("^.*?)","",parse_data5$Confirmeddeath)
  parse_data5$Confirmeddeath = gsub(",","",parse_data5$Confirmeddeath)
  parse_data5$Confirmeddeath = as.numeric(parse_data5$Confirmeddeath)
  
  parse_data5 = filter(parse_data5,parse_data5$Date >= as.Date("2020-03-31"))
  
  #merge two table into one single for each state and then combine them
  demo = merge(parse_data2,parse_data3,"Date")
  demo = merge(demo,parse_data4,"Date")
  demo = merge(demo,parse_data5,"Date")
  demo$States = gsub("-"," ",i)
  
  demo <- demo[, c("States","Date","Totalcases","Newcases","Confirmedcases","Probablecases",
              "TotalPCR","TotalABT_p","TotalABT_s","Recovered","Totaldeath","Newdeath","Probabledeath","Confirmeddeath")]
  demo <- demo[order(demo$Date,decreasing = TRUE),] #sort the table based on decreasing date
  
  demo$Newrecovered = ""
  demo$NewPCR = ""
  
  sess = nrow(demo)
  
  j = 1
  while (j <= sess-1){
    a = is.na(demo$Recovered[j])
    if (a == FALSE ){
      demo$Newrecovered[j] = demo$Recovered[j]
      for (k in (j+1):sess){
        b = is.na(demo$Recovered[k])
        if (b == FALSE){
          demo$Newrecovered[j] = demo$Recovered[j]-demo$Recovered[k]
          break
        }
      }
    }
    j = j+1
    if (j+1 == sess){
      demo$Newrecovered[j+1] = demo$Recovered[j+1]
      demo$Newcases[j+1] = demo$Totalcases[j+1]
    }
  }
  
  m = 1
  while (m <= sess-1){
    a = is.na(demo$TotalPCR[m])
    if (a == FALSE ){
      demo$NewPCR[m] = demo$TotalPCR[m]
      for (n in (m+1):sess){
        b = is.na(demo$TotalPCR[n])
        if (b == FALSE){
          demo$NewPCR[m] = demo$TotalPCR[m]-demo$TotalPCR[n]
          break
        }
      }
    }
    m = m+1
    if (m+1 == sess){
      demo$NewPCR[m+1] = demo$TotalPCR[m+1]
      demo$Newdeath[m+1] = demo$Totaldeath[m+1]
    }
  }
  
  Demo = rbind(Demo,demo)
}

#test1 = ifelse(is.na(Demo$TotalPCR),0,Demo$TotalPCR)
#test2 = ifelse(is.na(Demo$TotalABT_p),0,Demo$TotalABT_p)
#test3 = ifelse(is.na(Demo$TotalABT_s),0,Demo$TotalABT_s)

#Demo$Totaltests = ifelse(is.na(Demo$TotalPCR) & is.na(Demo$TotalABT_p) & is.na(Demo$TotalABT_s),"", test1 + test2 + test3)
#str(Demo$Totaltests)

Demo <- Demo[, c("States","Date","Totalcases","Newcases","TotalPCR","NewPCR","Recovered","Newrecovered","Totaldeath","Newdeath")]

## TRANSFORMING THE DATA
row.names(Demo) = 1:nrow(Demo)
Demo$States = as.factor(Demo$States)
Demo$NewPCR = as.numeric(Demo$NewPCR)
Demo$Newrecovered = as.numeric(Demo$Newrecovered)
str(Demo)
View(Demo)

library(stringr)
table(is.na(Demo))
str_detect(Demo,"NA")

#filter based on date, ex: for only November
Novemberdata = filter(Demo,Demo$Date >= as.Date("2020-11-01"))
View(Novemberdata)

#filter based on date and state: 
Novemberalabama = filter(Demo,Demo$Date >= as.Date("2020-11-01") & Demo$States == "alabama")
View(Novemberalabama)

write.csv(Demo,"realtime_covid_final_2.csv")
